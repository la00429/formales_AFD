"""
Demostraci√≥n de las mejoras implementadas en la GUI del simulador AFD.

Este m√≥dulo muestra las nuevas funcionalidades y mejoras visuales
implementadas en la interfaz gr√°fica.
"""

import tkinter as tk
from tkinter import ttk, messagebox
from typing import List, Dict


class ImprovementsDemo:
    """Demostraci√≥n de las mejoras de la GUI."""
    
    def __init__(self, parent):
        """
        Inicializar demostraci√≥n.
        
        Args:
            parent: Widget padre
        """
        self.parent = parent
        self.create_demo_window()
    
    def create_demo_window(self):
        """Crear ventana de demostraci√≥n."""
        self.demo_window = tk.Toplevel(self.parent)
        self.demo_window.title("Demostraci√≥n de Mejoras - Simulador AFD v2.0")
        self.demo_window.geometry("800x600")
        self.demo_window.resizable(True, True)
        
        # Hacer la ventana modal
        self.demo_window.transient(self.parent)
        self.demo_window.grab_set()
        
        # Frame principal con scroll
        main_frame = ttk.Frame(self.demo_window)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title_label = ttk.Label(
            main_frame,
            text="üöÄ Mejoras Implementadas en AFD Simulator v2.0",
            font=("Segoe UI", 18, "bold")
        )
        title_label.pack(pady=(0, 20))
        
        # Crear notebook para diferentes secciones
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill="both", expand=True)
        
        # Pesta√±a de mejoras visuales
        visual_frame = ttk.Frame(notebook)
        notebook.add(visual_frame, text="üé® Mejoras Visuales")
        self.create_visual_improvements_tab(visual_frame)
        
        # Pesta√±a de sistema de ayuda
        help_frame = ttk.Frame(notebook)
        notebook.add(help_frame, text="‚ùì Sistema de Ayuda")
        self.create_help_system_tab(help_frame)
        
        # Pesta√±a de validaci√≥n
        validation_frame = ttk.Frame(notebook)
        notebook.add(validation_frame, text="‚úÖ Validaci√≥n Mejorada")
        self.create_validation_tab(validation_frame)
        
        # Pesta√±a de tutorial
        tutorial_frame = ttk.Frame(notebook)
        notebook.add(tutorial_frame, text="üìö Tutorial Interactivo")
        self.create_tutorial_tab(tutorial_frame)
        
        # Bot√≥n cerrar
        close_button = ttk.Button(
            main_frame,
            text="Cerrar Demostraci√≥n",
            command=self.demo_window.destroy
        )
        close_button.pack(pady=(20, 0))
    
    def create_visual_improvements_tab(self, parent):
        """Crear pesta√±a de mejoras visuales."""
        # Frame con scroll
        canvas = tk.Canvas(parent)
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Contenido
        content = """
üé® MEJORAS VISUALES IMPLEMENTADAS

1. SISTEMA DE ESTILOS MODERNO:
   ‚úÖ Paleta de colores profesional y consistente
   ‚úÖ Fuentes modernas (Segoe UI)
   ‚úÖ Estilos personalizados para todos los widgets
   ‚úÖ Colores tem√°ticos para diferentes estados

2. INTERFAZ MEJORADA:
   ‚úÖ Dise√±o m√°s limpio y organizado
   ‚úÖ Mejor espaciado y padding
   ‚úÖ Colores de estado para validaci√≥n
   ‚úÖ Botones con estilos diferenciados

3. ELEMENTOS VISUALES:
   ‚úÖ Tooltips informativos en todos los elementos
   ‚úÖ Resaltado visual para estados de validaci√≥n
   ‚úÖ Colores espec√≠ficos para AFD (estados, transiciones, s√≠mbolos)
   ‚úÖ Mejor contraste y legibilidad

4. RESPONSIVIDAD:
   ‚úÖ Interfaz adaptable a diferentes tama√±os
   ‚úÖ Scrollbars autom√°ticos cuando es necesario
   ‚úÖ Layout flexible y organizado

COLORES IMPLEMENTADOS:
‚Ä¢ Azul principal (#2E86AB) - Elementos principales
‚Ä¢ Rosa/Magenta (#A23B72) - Elementos secundarios
‚Ä¢ Naranja (#F18F01) - Acentos y tooltips
‚Ä¢ Verde (#4CAF50) - Estados de √©xito
‚Ä¢ Rojo (#F44336) - Estados de error
‚Ä¢ Azul informaci√≥n (#2196F3) - Informaci√≥n
        """
        
        text_widget = tk.Text(scrollable_frame, wrap="word", padx=20, pady=20)
        text_widget.insert("1.0", content.strip())
        text_widget.config(state="disabled", font=("Consolas", 10))
        text_widget.pack(fill="both", expand=True)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def create_help_system_tab(self, parent):
        """Crear pesta√±a de sistema de ayuda."""
        # Frame con scroll
        canvas = tk.Canvas(parent)
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Contenido
        content = """
‚ùì SISTEMA DE AYUDA IMPLEMENTADO

1. TOOLTIPS CONTEXTUALES:
   ‚úÖ Ayuda instant√°nea al pasar el mouse
   ‚úÖ Explicaciones detalladas para cada elemento
   ‚úÖ Gu√≠as paso a paso integradas
   ‚úÖ Informaci√≥n contextual relevante

2. VENTANA DE AYUDA PRINCIPAL:
   ‚úÖ Pesta√±as organizadas por funcionalidad
   ‚úÖ Gu√≠as completas para cada secci√≥n
   ‚úÖ Ejemplos pr√°cticos y consejos
   ‚úÖ Navegaci√≥n f√°cil y intuitiva

3. AYUDA CONTEXTUAL:
   ‚úÖ Mensajes de ayuda espec√≠ficos por situaci√≥n
   ‚úÖ Sugerencias autom√°ticas en caso de error
   ‚úÖ Gu√≠as de resoluci√≥n de problemas
   ‚úÖ Tips y trucos integrados

4. DOCUMENTACI√ìN INTEGRADA:
   ‚úÖ Introducci√≥n completa al AFD
   ‚úÖ Gu√≠a del Editor AFD
   ‚úÖ Gu√≠a del Evaluador de Cadenas
   ‚úÖ Gu√≠a del Visualizador AFD
   ‚úÖ Ejemplos y patrones comunes

FUNCIONALIDADES DE AYUDA:
‚Ä¢ Tooltips en todos los widgets
‚Ä¢ Ventana de ayuda con pesta√±as
‚Ä¢ Ayuda contextual por situaci√≥n
‚Ä¢ Atajos de teclado documentados
‚Ä¢ Ejemplos interactivos
‚Ä¢ Gu√≠as paso a paso
        """
        
        text_widget = tk.Text(scrollable_frame, wrap="word", padx=20, pady=20)
        text_widget.insert("1.0", content.strip())
        text_widget.config(state="disabled", font=("Consolas", 10))
        text_widget.pack(fill="both", expand=True)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def create_validation_tab(self, parent):
        """Crear pesta√±a de validaci√≥n."""
        # Frame con scroll
        canvas = tk.Canvas(parent)
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Contenido
        content = """
‚úÖ SISTEMA DE VALIDACI√ìN MEJORADO

1. VALIDACI√ìN EN TIEMPO REAL:
   ‚úÖ Feedback inmediato al escribir
   ‚úÖ Validaci√≥n autom√°tica de campos
   ‚úÖ Indicadores visuales de estado
   ‚úÖ Mensajes de error espec√≠ficos

2. INDICADORES VISUALES:
   ‚úÖ Campos con borde verde para v√°lidos
   ‚úÖ Campos con borde rojo para errores
   ‚úÖ Campos con borde naranja para advertencias
   ‚úÖ Mensajes de feedback contextuales

3. VALIDACI√ìN INTELIGENTE:
   ‚úÖ Validaci√≥n de nombres de estados
   ‚úÖ Validaci√≥n de s√≠mbolos del alfabeto
   ‚úÖ Validaci√≥n de transiciones
   ‚úÖ Validaci√≥n completa del AFD

4. MENSAJES DE ERROR MEJORADOS:
   ‚úÖ Descripciones claras y espec√≠ficas
   ‚úÖ Sugerencias de correcci√≥n
   ‚úÖ Ayuda contextual para resolver errores
   ‚úÖ Resumen de validaci√≥n completo

TIPOS DE VALIDACI√ìN:
‚Ä¢ Estados: Nombres √∫nicos, no vac√≠os, formato v√°lido
‚Ä¢ Alfabeto: S√≠mbolos √∫nicos, caracteres individuales
‚Ä¢ Estado inicial: Debe existir en la lista de estados
‚Ä¢ Estados de aceptaci√≥n: Al menos uno, deben existir
‚Ä¢ Transiciones: Sin duplicados, estados v√°lidos
‚Ä¢ AFD completo: Todas las transiciones necesarias

NIVELES DE VALIDACI√ìN:
‚Ä¢ ‚úÖ √âXITO: Campo v√°lido y completo
‚Ä¢ ‚ö†Ô∏è ADVERTENCIA: Campo con problemas menores
‚Ä¢ ‚ùå ERROR: Campo con errores que impiden funcionamiento
‚Ä¢ ‚ÑπÔ∏è INFORMACI√ìN: Sugerencias y tips
        """
        
        text_widget = tk.Text(scrollable_frame, wrap="word", padx=20, pady=20)
        text_widget.insert("1.0", content.strip())
        text_widget.config(state="disabled", font=("Consolas", 10))
        text_widget.pack(fill="both", expand=True)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def create_tutorial_tab(self, parent):
        """Crear pesta√±a de tutorial."""
        # Frame con scroll
        canvas = tk.Canvas(parent)
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Contenido
        content = """
üìö TUTORIAL INTERACTIVO IMPLEMENTADO

1. TUTORIAL PASO A PASO:
   ‚úÖ Gu√≠a interactiva completa
   ‚úÖ 14 pasos detallados
   ‚úÖ Navegaci√≥n f√°cil (anterior/siguiente)
   ‚úÖ Barra de progreso visual

2. RESALTADO VISUAL:
   ‚úÖ Resaltado de elementos importantes
   ‚úÖ Overlay visual para widgets objetivo
   ‚úÖ Enfoque autom√°tico en campos relevantes
   ‚úÖ Acciones autom√°ticas guiadas

3. CONTENIDO EDUCATIVO:
   ‚úÖ Explicaciones claras y detalladas
   ‚úÖ Ejemplos pr√°cticos
   ‚úÖ Consejos y mejores pr√°cticas
   ‚úÖ Gu√≠a completa del flujo de trabajo

4. FUNCIONALIDADES AVANZADAS:
   ‚úÖ Tutorial modal (no interfiere con la app)
   ‚úÖ Posibilidad de saltar pasos
   ‚úÖ Reinicio del tutorial
   ‚úÖ Finalizaci√≥n con confirmaci√≥n

PASOS DEL TUTORIAL:
1. Introducci√≥n y bienvenida
2. Definir estados del AFD
3. Agregar estados a la lista
4. Definir alfabeto
5. Agregar s√≠mbolos al alfabeto
6. Seleccionar estado inicial
7. Definir estados de aceptaci√≥n
8. Agregar estados de aceptaci√≥n
9. Definir transiciones
10. Agregar transiciones
11. Validar AFD completo
12. Probar cadenas (cambiar pesta√±a)
13. Visualizar AFD (cambiar pesta√±a)
14. Finalizaci√≥n y consejos

CARACTER√çSTICAS:
‚Ä¢ Interfaz intuitiva y f√°cil de usar
‚Ä¢ Progreso visual claro
‚Ä¢ Navegaci√≥n flexible
‚Ä¢ Contenido educativo completo
‚Ä¢ Integraci√≥n perfecta con la aplicaci√≥n
        """
        
        text_widget = tk.Text(scrollable_frame, wrap="word", padx=20, pady=20)
        text_widget.insert("1.0", content.strip())
        text_widget.config(state="disabled", font=("Consolas", 10))
        text_widget.pack(fill="both", expand=True)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")


def show_improvements_demo(parent):
    """Mostrar demostraci√≥n de mejoras."""
    demo = ImprovementsDemo(parent)
    return demo.demo_window

